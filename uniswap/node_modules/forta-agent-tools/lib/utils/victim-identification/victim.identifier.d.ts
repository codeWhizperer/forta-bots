import { ethers, TransactionEvent } from "forta-agent";
import AddressesExtractor from "./helpers/addresses.extractor";
import TokenInfoFetcher from "./helpers/token.info.fetcher";
interface apiKeys {
    ethplorerApiKey?: string;
    luabaseApiKey?: string;
    moralisApiKey?: string;
    etherscanApiKey?: string;
    optimisticEtherscanApiKey?: string;
    bscscanApiKey?: string;
    polygonscanApiKey?: string;
    fantomscanApiKey?: string;
    arbiscanApiKey?: string;
    snowtraceApiKey?: string;
}
export declare const getImplementationAddress: (provider: ethers.providers.JsonRpcProvider, address: string, blockNumber: number) => Promise<string | undefined>;
export default class VictimIdentifier extends TokenInfoFetcher {
    addressesExtractor: AddressesExtractor;
    private init;
    private protocols;
    private victimOccurrences;
    private maxOccurrences;
    private isContractCache;
    constructor(provider: ethers.providers.JsonRpcProvider, apiKeys: apiKeys);
    private getProtocols;
    private getExploitationStageVictims;
    private getVictimOccurences;
    private getPreparationStageConfidenceLevels;
    private getExploitationStageConfidenceLevel;
    private identifyVictims;
    getIdentifiedVictims: (txEvent: TransactionEvent) => Promise<{
        exploitationStage: Record<string, {
            protocolUrl: string;
            protocolTwitter: string;
            tag: string;
            holders: string[];
            confidence: number;
        }>;
        preparationStage: Record<string, {
            protocolUrl: string;
            protocolTwitter: string;
            tag: string;
            holders: string[];
            confidence: number;
        }>;
    }>;
}
export {};
