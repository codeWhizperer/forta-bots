"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var utils_1 = require("ethers/lib/utils");
var lru_cache_1 = __importDefault(require("lru-cache"));
var constants_1 = require("./constants");
var node_fetch_1 = __importDefault(require("node-fetch"));
var restApis = {
    ethplorerKey: "",
    luabaseKey: "",
    moralisKey: "",
};
var getTopTokenHoldersUrl = function (tokenAddress, key) {
    return "https://api.ethplorer.io/getTopTokenHolders/".concat(tokenAddress, "?apiKey=").concat(key, "&limit=1000");
};
var uniswapV3Query = function (pool) {
    return "\n  {\n    positions(where: {\n      pool: \"".concat(pool.toLowerCase(), "\"\n    }) {\n      owner\n    }\n  }\n  ");
};
var getMoralisChainByChainId = function (chainId) {
    switch (Number(chainId)) {
        case 56:
            return "bsc";
        case 137:
            return "polygon";
        case 250:
            return "fantom";
        case 43114:
            return "avalanche";
        default:
            return "eth";
    }
};
var getUniswapPrice = function (chainId, token) { return __awaiter(void 0, void 0, void 0, function () {
    var options, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (restApis["moralisKey"] === "")
                    return [2 /*return*/, 0];
                options = {
                    method: "GET",
                    params: { chain: getMoralisChainByChainId(chainId) },
                    headers: { accept: "application/json", "X-API-Key": restApis["moralisKey"] },
                };
                return [4 /*yield*/, (0, node_fetch_1.default)("https://deep-index.moralis.io/api/v2/erc20/".concat(token, "/price"), options)];
            case 1: return [4 /*yield*/, (_a.sent()).json()];
            case 2:
                response = (_a.sent());
                return [2 /*return*/, response.usdPrice];
        }
    });
}); };
var getTokenPriceUrl = function (chain, token) {
    return "https://api.coingecko.com/api/v3/simple/token_price/".concat(chain, "?contract_addresses=").concat(token, "&vs_currencies=usd");
};
var getChainByChainId = function (chainId) {
    switch (Number(chainId)) {
        case 10:
            return "optimistic-ethereum";
        case 56:
            return "binance-smart-chain";
        case 137:
            return "polygon-pos";
        case 250:
            return "fantom";
        case 42161:
            return "arbitrum-one";
        case 43114:
            return "avalanche";
        default:
            return "ethereum";
    }
};
var getNativeTokenByChainId = function (chainId) {
    switch (Number(chainId)) {
        case 10:
            return "ethereum";
        case 56:
            return "binancecoin";
        case 137:
            return "matic-network";
        case 250:
            return "fantom";
        case 42161:
            return "ethereum";
        case 43114:
            return "avalanche-2";
        default:
            return "ethereum";
    }
};
var getNativeTokenPrice = function (chain) {
    return "https://api.coingecko.com/api/v3/simple/price?ids=".concat(chain, "&vs_currencies=usd");
};
var getNativeTokenSymbolByChainId = function (chainId) {
    switch (Number(chainId)) {
        case 10:
            return "ETH";
        case 56:
            return "BNB";
        case 137:
            return "MATIC";
        case 250:
            return "FTM";
        case 42161:
            return "ETH";
        case 43114:
            return "AVAX";
        default:
            return "ETH";
    }
};
var TokenInfoFetcher = /** @class */ (function () {
    function TokenInfoFetcher(provider, apiKeys) {
        // Extract the keys or set default values
        var _a = apiKeys.ethplorerApiKey, ethplorerApiKey = _a === void 0 ? "freekey" : _a, _b = apiKeys.moralisApiKey, moralisApiKey = _b === void 0 ? "" : _b;
        // Set the keys
        restApis["ethplorerKey"] = ethplorerApiKey;
        restApis["moralisKey"] = moralisApiKey;
        this.provider = provider;
        this.cache = new lru_cache_1.default({
            max: 10000,
        });
        this.tokenContract = new ethers_1.Contract("", new utils_1.Interface(constants_1.TOKEN_ABI), this.provider);
        this.tokensPriceCache = new lru_cache_1.default({ max: 10000 });
        this.latestBlockNumber = 0;
    }
    TokenInfoFetcher.prototype.getBalance = function (block, protocolAddress, tokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var token, key, balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.tokenContract.attach(tokenAddress);
                        key = "balance-".concat(protocolAddress, "-").concat(tokenAddress, "-").concat(block);
                        if (this.cache.has(key))
                            return [2 /*return*/, this.cache.get(key)];
                        return [4 /*yield*/, token.balanceOf(protocolAddress, {
                                blockTag: block,
                            })];
                    case 1:
                        balance = _a.sent();
                        this.cache.set(key, balance);
                        return [2 /*return*/, balance];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getTotalSupply = function (block, tokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var token, key, totalSupply;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.tokenContract.attach(tokenAddress);
                        key = "totalSupply-".concat(tokenAddress, "-").concat(block);
                        if (this.cache.has(key))
                            return [2 /*return*/, this.cache.get(key)];
                        return [4 /*yield*/, token.totalSupply({
                                blockTag: block,
                            })];
                    case 1:
                        totalSupply = _a.sent();
                        this.cache.set(key, totalSupply);
                        return [2 /*return*/, totalSupply];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getSymbolOrName = function (chainId, block, tokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var token, key, symbol, _a, makerLikeToken, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        token = this.tokenContract.attach(tokenAddress);
                        key = "symbol-".concat(chainId, "-").concat(tokenAddress, "-").concat(block);
                        if (this.cache.has(key))
                            return [2 /*return*/, this.cache.get(key)];
                        if (!(tokenAddress === "native")) return [3 /*break*/, 1];
                        symbol = getNativeTokenSymbolByChainId(chainId);
                        return [3 /*break*/, 12];
                    case 1:
                        _f.trys.push([1, 3, , 12]);
                        return [4 /*yield*/, token.symbol({
                                blockTag: block,
                            })];
                    case 2:
                        symbol = _f.sent();
                        this.cache.set(key, symbol);
                        return [3 /*break*/, 12];
                    case 3:
                        _a = _f.sent();
                        makerLikeToken = new ethers_1.Contract(tokenAddress, new utils_1.Interface(constants_1.MKR_TOKEN_ABI), this.provider);
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, 6, , 11]);
                        _c = (_b = ethers_1.ethers.utils).parseBytes32String;
                        return [4 /*yield*/, makerLikeToken.symbol({
                                blockTag: block,
                            })];
                    case 5:
                        symbol = _c.apply(_b, [_f.sent()]);
                        this.cache.set(key, symbol);
                        return [3 /*break*/, 11];
                    case 6:
                        _d = _f.sent();
                        _f.label = 7;
                    case 7:
                        _f.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, this.getName(block, tokenAddress)];
                    case 8:
                        symbol = _f.sent();
                        return [3 /*break*/, 10];
                    case 9:
                        _e = _f.sent();
                        symbol = "Not Found";
                        return [3 /*break*/, 10];
                    case 10: return [3 /*break*/, 11];
                    case 11: return [3 /*break*/, 12];
                    case 12:
                        this.cache.set(key, symbol);
                        return [2 /*return*/, symbol];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getName = function (block, tokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var token, key, name, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        token = this.tokenContract.attach(tokenAddress);
                        key = "name-".concat(tokenAddress, "-").concat(block);
                        if (this.cache.has(key))
                            return [2 /*return*/, this.cache.get(key)];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, token.name({
                                blockTag: block,
                            })];
                    case 2:
                        name = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        name = "Not Found";
                        return [3 /*break*/, 4];
                    case 4:
                        this.cache.set(key, name);
                        return [2 /*return*/, name];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getDecimals = function (block, tokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var token, key, decimals;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.tokenContract.attach(tokenAddress);
                        key = "decimals-".concat(tokenAddress, "-").concat(block);
                        if (this.cache.has(key))
                            return [2 /*return*/, this.cache.get(key)];
                        return [4 /*yield*/, token.decimals({
                                blockTag: block,
                            })];
                    case 1:
                        decimals = _a.sent();
                        this.cache.set(key, decimals);
                        return [2 /*return*/, decimals];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getValueInUsd = function (block, chainId, amount, token) {
        return __awaiter(this, void 0, void 0, function () {
            var response, usdPrice, key, chain, retries, _a, chain, _b, _c, tokenAmount, decimals;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        key = "usdPrice-".concat(token, "-").concat(block);
                        if (!this.tokensPriceCache.has(key)) return [3 /*break*/, 1];
                        usdPrice = this.tokensPriceCache.get(key);
                        return [3 /*break*/, 19];
                    case 1:
                        if (!(token === "native")) return [3 /*break*/, 9];
                        chain = getNativeTokenByChainId(chainId);
                        retries = 3;
                        _d.label = 2;
                    case 2:
                        if (!(retries > 0)) return [3 /*break*/, 8];
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 6, , 7]);
                        return [4 /*yield*/, (0, node_fetch_1.default)(getNativeTokenPrice(chain))];
                    case 4: return [4 /*yield*/, (_d.sent()).json()];
                    case 5:
                        response = (_d.sent());
                        return [3 /*break*/, 8];
                    case 6:
                        _a = _d.sent();
                        retries--;
                        return [3 /*break*/, 7];
                    case 7: return [3 /*break*/, 2];
                    case 8:
                        if (!response || !response[getNativeTokenByChainId(chainId)]) {
                            if (this.tokensPriceCache.has("usdPrice-".concat(token, "-").concat(block - 1))) {
                                usdPrice = this.tokensPriceCache.get("usdPrice-".concat(token, "-").concat(block - 1));
                            }
                            else
                                return [2 /*return*/, 0];
                        }
                        else {
                            usdPrice = response[getNativeTokenByChainId(chainId)].usd;
                        }
                        return [3 /*break*/, 18];
                    case 9:
                        chain = getChainByChainId(chainId);
                        _d.label = 10;
                    case 10:
                        _d.trys.push([10, 13, , 18]);
                        return [4 /*yield*/, (0, node_fetch_1.default)(getTokenPriceUrl(chain, token))];
                    case 11: return [4 /*yield*/, (_d.sent()).json()];
                    case 12:
                        response = (_d.sent());
                        if (response && response[token]) {
                            usdPrice = response[token].usd;
                        }
                        else {
                            throw new Error("Error: Can't fetch USD price on CoinGecko");
                        }
                        return [3 /*break*/, 18];
                    case 13:
                        _b = _d.sent();
                        if (chainId === 10 || chainId === 42161)
                            return [2 /*return*/, 0]; // Moralis API is not available on Optimism & Arbitrum
                        _d.label = 14;
                    case 14:
                        _d.trys.push([14, 16, , 17]);
                        return [4 /*yield*/, getUniswapPrice(chainId, token)];
                    case 15:
                        usdPrice = _d.sent();
                        if (!usdPrice)
                            return [2 /*return*/, 0];
                        return [3 /*break*/, 17];
                    case 16:
                        _c = _d.sent();
                        return [2 /*return*/, 0];
                    case 17: return [3 /*break*/, 18];
                    case 18:
                        this.tokensPriceCache.set("usdPrice-".concat(token, "-").concat(block), usdPrice);
                        _d.label = 19;
                    case 19:
                        if (!(token === "native")) return [3 /*break*/, 20];
                        tokenAmount = ethers_1.ethers.utils.formatEther(amount);
                        return [3 /*break*/, 22];
                    case 20: return [4 /*yield*/, this.getDecimals(block, token)];
                    case 21:
                        decimals = _d.sent();
                        tokenAmount = ethers_1.ethers.utils.formatUnits(amount, decimals);
                        _d.label = 22;
                    case 22: return [2 /*return*/, Number(tokenAmount) * usdPrice];
                }
            });
        });
    };
    TokenInfoFetcher.prototype.getHolders = function (tokenOrPool, tag) {
        return __awaiter(this, void 0, void 0, function () {
            var holders, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        holders = [];
                        if (!(tokenOrPool !== "native")) return [3 /*break*/, 10];
                        response = void 0;
                        if (!tag.startsWith("Uniswap V3")) return [3 /*break*/, 6];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, (0, node_fetch_1.default)(constants_1.SUBGRAPH_URL, {
                                method: "POST",
                                headers: { "content-type": "application/json" },
                                body: JSON.stringify({ query: uniswapV3Query(tokenOrPool) }),
                            })];
                    case 2: return [4 /*yield*/, (_c.sent()).json()];
                    case 3:
                        response = (_c.sent());
                        response.data.positions.forEach(function (position) { return holders.push(position.owner); });
                        return [3 /*break*/, 5];
                    case 4:
                        _a = _c.sent();
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 10];
                    case 6:
                        _c.trys.push([6, 9, , 10]);
                        return [4 /*yield*/, (0, node_fetch_1.default)(getTopTokenHoldersUrl(tokenOrPool, restApis["ethplorerKey"]))];
                    case 7: return [4 /*yield*/, (_c.sent()).json()];
                    case 8:
                        response = (_c.sent());
                        response.holders.forEach(function (holder) {
                            return holders.push(holder.address);
                        });
                        return [3 /*break*/, 10];
                    case 9:
                        _b = _c.sent();
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/, holders];
                }
            });
        });
    };
    return TokenInfoFetcher;
}());
exports.default = TokenInfoFetcher;
