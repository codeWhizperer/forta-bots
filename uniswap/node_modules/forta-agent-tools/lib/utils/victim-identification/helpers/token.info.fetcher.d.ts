import { providers, BigNumber } from "ethers";
interface apiKeys {
    ethplorerApiKey?: string;
    luabaseApiKey?: string;
    moralisApiKey?: string;
    etherscanApiKey?: string;
    optimisticEtherscanApiKey?: string;
    bscscanApiKey?: string;
    polygonscanApiKey?: string;
    fantomscanApiKey?: string;
    arbiscanApiKey?: string;
    snowtraceApiKey?: string;
}
export default class TokenInfoFetcher {
    provider: providers.JsonRpcProvider;
    private cache;
    private tokensPriceCache;
    private tokenContract;
    latestBlockNumber: number;
    constructor(provider: providers.JsonRpcProvider, apiKeys: apiKeys);
    getBalance(block: number, protocolAddress: string, tokenAddress: string): Promise<BigNumber>;
    getTotalSupply(block: number, tokenAddress: string): Promise<BigNumber>;
    getSymbolOrName(chainId: number, block: number | string, tokenAddress: string): Promise<string>;
    getName(block: number | string, tokenAddress: string): Promise<string>;
    getDecimals(block: number | string, tokenAddress: string): Promise<number>;
    getValueInUsd(block: number, chainId: number, amount: string, token: string): Promise<number>;
    getHolders(tokenOrPool: string, tag: string): Promise<string[]>;
}
export {};
